/*
Program Name: EECS 348 Assignment 6
Description: Brute force Puzzle Solving Program
Inputs: Test files labled puzzleX.txt where every X is a number in [1, 5]
Output: Solved puzzles (All solutions)

Collaborators: Code generated by Deepseek AI, Annotated and Dubugged by Author

Author: Aiman Boullaouz
Creation Date: 3/25/20225
*/

#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
using namespace std;

struct SudokuGrid {
    int cells[9][9];
};

class SudokuSolver {
private:
    int grid[9][9];
    vector<SudokuGrid> solutions;

    bool findEmptyCell(int &row, int &col) {
        for (row = 0; row < 9; row++) {
            for (col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    return true;
                }
            }
        }
        return false;
    }

    bool isValid(int row, int col, int num) {
        for (int c = 0; c < 9; c++) {
            if (grid[row][c] == num && c != col) {
                return false;
            }
        }
        for (int r = 0; r < 9; r++) {
            if (grid[r][col] == num && r != row) {
                return false;
            }
        }
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                int currentRow = startRow + r;
                int currentCol = startCol + c;
                if (grid[currentRow][currentCol] == num && (currentRow != row || currentCol != col)) {
                    return false;
                }
            }
        }
        return true;
    }

public:
    SudokuSolver(int initialGrid[9][9]) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                grid[i][j] = initialGrid[i][j];
            }
        }
    }

    void solve() {
        int row, col;
        if (!findEmptyCell(row, col)) {
            SudokuGrid solution;
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    solution.cells[i][j] = grid[i][j];
                }
            }
            solutions.push_back(solution);
            return;
        }

        for (int num = 1; num <= 9; num++) {
            if (isValid(row, col, num)) {
                grid[row][col] = num;
                solve();
                grid[row][col] = 0;
            }
        }
    }

    const vector<SudokuGrid>& getSolutions() const {
        return solutions;
    }

    void printOriginal() const {
        printGrid(grid);
    }

    static void printGrid(const int grid[9][9]) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (grid[i][j] == 0) {
                    cout << "_ ";
                } else {
                    cout << grid[i][j] << " ";
                }
            }
            cout << endl;
        }
    }
};

bool readSudokuGridFromFile(const string& filename, int grid[9][9]) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open file '" << filename << "'" << endl;
        return false;
    }

    string line;
    int row = 0;
    while (getline(file, line) && row < 9) {
        istringstream iss(line);
        vector<string> tokens;
        string token;
        while (iss >> token) {
            tokens.push_back(token);
        }
        if (tokens.size() != 9) {
            cerr << "Error: Line " << row + 1 << " in file '" << filename 
                 << "' does not contain 9 elements." << endl;
            return false;
        }
        for (int col = 0; col < 9; col++) {
            string& token = tokens[col];
            if (token.size() != 1) {
                cerr << "Error: Invalid element '" << token << "' in file '" << filename 
                     << "' at line " << row + 1 << ", column " << col + 1 << endl;
                return false;
            }
            char c = token[0];
            if (c == '_') {
                grid[row][col] = 0;
            } else if (isdigit(c)) {
                int num = c - '0';
                if (num < 1 || num > 9) {
                    cerr << "Error: Invalid digit '" << c << "' in file '" << filename 
                         << "' at line " << row + 1 << ", column " << col + 1 << endl;
                    return false;
                }
                grid[row][col] = num;
            } else {
                cerr << "Error: Invalid character '" << c << "' in file '" << filename 
                     << "' at line " << row + 1 << ", column " << col + 1 << endl;
                return false;
            }
        }
        row++;
    }

    if (row != 9) {
        cerr << "Error: File '" << filename << "' contains " << row << " lines, but 9 are required." << endl;
        return false;
    }

    return true;
}

int main() {
    for (int i = 1; i <= 5; ++i) {
        string filename = "puzzle" + to_string(i) + ".txt";
        int grid[9][9] = {0};

        cout << "Processing " << filename << ":" << endl;
        if (!readSudokuGridFromFile(filename, grid)) {
            cout << "Skipping due to errors." << endl << endl;
            continue;
        }

        SudokuSolver solver(grid);
        cout << "Original puzzle:" << endl;
        solver.printOriginal();
        cout << endl;

        solver.solve();
        vector<SudokuGrid> solutions = solver.getSolutions();

        if (solutions.empty()) {
            cout << "No solution found." << endl;
        } else {
            cout << "Solutions found: " << solutions.size() << endl;
            for (size_t sol = 0; sol < solutions.size(); ++sol) {
                cout << "Solution " << (sol + 1) << ":" << endl;
                SudokuSolver::printGrid(solutions[sol].cells);
                cout << endl;
            }
        }
        cout << "------------------------" << endl << endl;
    }

    return 0;
}
